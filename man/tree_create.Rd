% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{tree_create}
\alias{tree_create}
\title{A random-split method to build a tree for binary classification}
\usage{
tree_create(x, y, q = NA_integer_, s_min = 1L, random_split = TRUE)
}
\arguments{
\item{x}{Numeric matrix, with \code{n} rows and \code{p} columns.}

\item{y}{The binary label, either 0 or 1.}

\item{q}{The number of dimensions of \code{x} to be considered for split at each node. (Default q=\code{sqrt(p)})}

\item{s_min}{If the number of sample on the node is less than s_min (default 1), latter split will be ended.}

\item{random_split}{\code{T} or \code{F}. \code{T} means that we would like to randomly choose \code{q} dimensions of \code{x} to split at each node. \code{F} means we just split in q dimensions randomly chosen at the beginning.}
}
\value{
A tree saved as a list contains information. The list contains several iems as below
\item{node}{The number of the node}
\item{parent}{Parent node of the current node}
\item{left_child}{Left child of the node}
\item{right_chile}{Right child of the node}
\item{split_dim}{Split dim for the node, "0" means no split}
\item{split_pos}{Split value}
\item{node_status}{Interior of Terminal. 1 for terminal and 0 for interior.}
\item{num_0}{The number of sample with label 0 in the node}
\item{num_1}{The number of sample with label 1 in the node}
\item{label}{Predict label for the leaf.}
}

\description{
We use recursive partition to build a tree for binary classification problem. We take the mean-square error instead of gini as the split criteria. We can choose to build a random-split tree or a deterministic tree by setting the parameter \code{q} and \code{random_split}. This function is the base for a random forest.
}
\examples{
\dontrun{
data(iris)
iris_data <- as.matrix(iris[1:100,-5])
iris_label <- as.numeric(iris[1:100,5])-1
set.seed(15)
ind <- 1:100
ind_tr <- sample(ind,60)
ind_test <- ind[-ind_tr]
t <- tree_create(x=iris_data,y=iris_label,q=4,random_split=F)
pre <- sapply(1:40,tree_predict(t,iris_data[ind_test[i],]))
}
}
